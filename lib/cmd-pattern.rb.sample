# https://gurzu.com/blog/command-design-pattern-in-ruby/
# Invoker
class Switch
  attr_reader :history


  def execute(cmd)
    @history ||= []
    @history << cmd.execute
  end
end


# Command Interface
class Command
  attr_reader :light


  def initialize(light)
    @light = light
  end
  def execute
    raise NotImplementedError
  end
end


# Command for turning on
class TurnOnCommand < Command
  def execute
    light.turn_on
  end
end


# Command for turning off
class TurnOffCommand < Command
  def execute
    light.turn_off
  end
end


# Receiver
class Light
  def turn_on
    'the light is on'
  end


  def turn_off
    'the light is off'
  end
end


# Client
class LightSwitchClient
  attr_reader :switch


  def initialize
    @lamp = Light.new
    @switch = Switch.new
  end


  def switch_for(cmd)
    case cmd
    when 'on'  then @switch.execute(TurnOnCommand.new(@lamp))
    when 'off' then @switch.execute(TurnOffCommand.new(@lamp))
    else puts 'Sorry, I so sorry'
    end
  end
end


puts "#########################"
client = LightSwitchClient.new
puts client.switch_for('on')   
puts client.switch_for('off')    
puts "#########################"
puts client.switch.history


# https://cloud.vk.com/blog/26-osnovnyh-patternov-mikroservisnoj-razrabotki
# https://deworker.pro/edu/series/interactive-site/ddd-contexts
# https://stackoverflow.com/questions/48674793/rabbitmq-bunny-subscribe-block-not-called-if-within-a-thread
# cat  >( while true; do VAR="1: $(date)"; sleep 1; echo $VAR; done )  >( while true; do VAR="2: $(date)"; sleep 1; echo $VAR; done ) | tee /dev/stdout
# A.class_eval 'def f7; puts "f77777777"; end'
# A.new.f7
# https://habr.com/ru/articles/770564
# https://market.yandex.ru/product--thinkvision-t27q-20/662135015?sku=100916303741&uniqueId=1134632
# https://operatorhub.io/?category=Database
#
#


